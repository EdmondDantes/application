<?php

declare(strict_types=1);

namespace IfCastle\Application\Bootloader\BootManager;

use IfCastle\Application\Bootloader\BootManager\Exceptions\BootloaderException;
use IfCastle\Application\Bootloader\BootManager\Exceptions\PackageAlreadyExists;
use IfCastle\Application\Bootloader\BootManager\Exceptions\PackageNotFound;
use IfCastle\OsUtilities\FileSystem\File;
use IfCastle\OsUtilities\Safe;

class BootManagerByDirectory implements BootManagerInterface
{
    public function __construct(protected string $bootloaderDir) {}

    #[\Override]
    public function createComponent(string $componentName): ComponentInterface
    {
        return new Component($componentName);
    }

    #[\Override]
    public function getComponent(string $componentName): ComponentInterface
    {
        $this->validateComponent($componentName);

        $file                       = $this->bootloaderDir . '/' . $componentName . '.ini';

        if (false === \file_exists($file)) {
            throw new PackageNotFound($componentName);
        }

        $data                       = \parse_ini_file($file, true, INI_SCANNER_TYPED);

        if (false === \is_array($data)) {
            throw new BootloaderException('Invalid bootloader file: ' . $file);
        }

        return new Component($componentName, $data);
    }

    #[\Override]
    public function addComponent(ComponentInterface $component): void
    {
        if (false === $component->isNew()) {
            throw new BootloaderException('Component already exists: ' . $component->getName());
        }

        $this->validateComponent($component->getName());

        $file                       = $this->bootloaderDir . '/' . $component->getName() . '.ini';

        if (\file_exists($file)) {
            throw new PackageAlreadyExists($component->getName());
        }

        File::put($file, $this->generateComponentContent($component));
    }

    #[\Override]
    public function updateComponent(ComponentInterface $component): void
    {
        if ($component->isNew()) {
            $this->addComponent($component);
            return;
        }

        $this->validateComponent($component->getName());

        $file                       = $this->bootloaderDir . '/' . $component->getName() . '.ini';

        if (false === \file_exists($file)) {
            throw new PackageNotFound($component->getName());
        }

        File::put($file, $this->generateComponentContent($component));
    }

    #[\Override]
    public function removeComponent(string $componentName): void
    {
        $this->validateComponent($componentName);

        $file                       = $this->bootloaderDir . '/' . $componentName . '.ini';

        if (false === \file_exists($file)) {
            throw new PackageNotFound($componentName);
        }

        Safe::execute(fn() => \unlink($file));
    }

    protected function validateComponent(string $componentName): void
    {
        if (\preg_match('/[^a-z0-9_]/i', $componentName)) {
            throw new BootloaderException('Invalid component name: ' . $componentName);
        }
    }

    protected function generateComponentContent(ComponentInterface $component): string
    {
        $now                        = \date('Y-m-d H:i:s');
        $header                     = <<<INI
            ; ========================================================
            ; This file is generated by the BootManager at $now
            ; Do not edit manually
            ; ========================================================
            INI;

        if (!empty($component->getDescription())) {
            foreach (\explode(PHP_EOL, $component->getDescription()) as $line) {
                $header            .= PHP_EOL . '; ' . $line;
            }
        }

        $data                       = [
            'isActive'              => $component->isActivated(),
            'description'           => $component->getDescription(),
        ] + $component->getGroups();

        return $header . PHP_EOL . PHP_EOL . $this->arrayToIni($data);
    }

    /**
     * @param array<string, scalar|array<scalar>> $data
     *
     * @return string
     */
    protected function arrayToIni(array $data): string
    {
        $ini                        = [];

        foreach ($data as $key => $value) {
            if (\is_array($value)) {

                if (!\is_string($key)) {
                    throw new BootloaderException(
                        'Nested arrays are not supported for ini files with not string keys'
                    );
                }

                if (\array_is_list($value)) {
                    $ini            = \array_merge($ini, $this->arrayToBlock($key, $value));
                } else {
                    $ini            = \array_merge($ini, $this->arrayToSection($key, $value));
                }

            } else {
                $ini[]              = $key . ' = ' . $this->valueToIni($value);
            }
        }

        return \implode(PHP_EOL, $ini);
    }

    /**
     * @param string $section
     * @param array<string, scalar|array<scalar>> $data
     *
     * @return array<string>
     */
    protected function arrayToSection(string $section, array $data): array
    {
        $ini                        = [];
        $ini[]                      = '';
        $ini[]                      = '[' . $section . ']';

        foreach ($data as $key => $value) {
            if (\is_array($value)) {
                $ini                = \array_merge($ini, $this->arrayToBlock($key, $value));
            } else {
                $ini[]              = $key . ' = ' . $this->valueToIni($value);
            }
        }

        return $ini;
    }

    /**
     * @param string $block
     * @param array<scalar|mixed[]> $data
     *
     * @return array<string>
     */
    protected function arrayToBlock(string $block, array $data): array
    {
        $ini                        = [];
        $ini[]                      = '';
        $isList                     = \array_is_list($data);

        foreach ($data as $key => $value) {

            if (\is_array($value)) {
                throw new BootloaderException('Nested arrays are not supported for sections: ' . $block);
            }

            if ($isList) {
                $ini[]              = $block . '[] = ' . $this->valueToIni($value);
            } else {
                $ini[]              = $block . '[' . $key . '] = ' . $this->valueToIni($value);
            }
        }

        return $ini;
    }

    protected function valueToIni(mixed $value): string
    {
        if (\is_int($value) || \is_float($value)) {
            return (string) $value;
        }

        if (\is_bool($value)) {
            return $value ? 'true' : 'false';
        }

        // escape double quotes and backslashes
        $value                      = \str_replace(['\\', '"'], ['\\\\', '\"'], $value);

        return '"' . $value . '"';
    }

}
