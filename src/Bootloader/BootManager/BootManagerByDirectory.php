<?php
declare(strict_types=1);

namespace IfCastle\Application\Bootloader\BootManager;

use IfCastle\Application\Bootloader\BootManager\Exceptions\BootloaderException;
use IfCastle\Application\Bootloader\BootManager\Exceptions\PackageAlreadyExists;
use IfCastle\Application\Bootloader\BootManager\Exceptions\PackageNotFound;
use IfCastle\OsUtilities\FileSystem\File;
use IfCastle\OsUtilities\Safe;

class BootManagerByDirectory        implements BootManagerInterface
{
    public function __construct(protected string $bootloaderDir) {}
    
    
    #[\Override]
    public function addBootloader(
        string $componentName,
        array  $bootloaders,
        array  $applications = []
    ): void
    {
        $this->validateComponent($componentName);
        
        $file                       = $this->bootloaderDir.'/'.$componentName.'.ini';
        
        if(file_exists($file)) {
            throw new PackageAlreadyExists($componentName);
        }

        $data['is_active']          = true;

        foreach ($bootloaders as $bootloader) {
            $data['bootloader'][]   = $bootloader;
        }

        foreach ($applications as $application) {
            $data['for_application'][] = $application;
        }

        File::put($file, $this->generateBootloaderContent($data));
    }
    
    #[\Override]
    public function activateBootloader(string $componentName): void
    {
        $this->validateComponent($componentName);
        
        $file                       = $this->bootloaderDir.'/'.$componentName.'.ini';
        
        if(false === file_exists($file)) {
            throw new PackageNotFound($componentName);
        }
        
        $data                       = parse_ini_file($file, true);
        
        if(false === is_array($data)) {
            throw new BootloaderException('Invalid bootloader file: '.$file);
        }
        
        $data['is_active']          = true;
        
        File::put($file, $this->generateBootloaderContent($data));
    }
    
    #[\Override]
    public function deactivateBootloader(string $componentName): void
    {
        $this->validateComponent($componentName);
        
        $file                       = $this->bootloaderDir.'/'.$componentName.'.ini';
        
        if(false === file_exists($file)) {
            throw new BootloaderException('Bootloader not found: '.$componentName);
        }
        
        $data                       = parse_ini_file($file, true);
        
        if(false === is_array($data)) {
            throw new BootloaderException('Invalid bootloader file: '.$file);
        }
        
        $data['is_active']          = false;
        
        File::put($file, $this->generateBootloaderContent($data));
    }
    
    #[\Override]
    public function removeBootloader(string $componentName): void
    {
        $this->validateComponent($componentName);
        
        $file                       = $this->bootloaderDir.'/'.$componentName.'.ini';
        
        if(false === file_exists($file)) {
            throw new PackageNotFound($componentName);
        }
        
        Safe::execute(fn() => unlink($file));
    }
    
    protected function validateComponent(string $componentName): void
    {
        if(preg_match('/[^a-z0-9_]/', $componentName)) {
            throw new BootloaderException('Invalid component name: '.$componentName);
        }
    }
    
    protected function generateBootloaderContent(array $data): string
    {
        $now                        = date('Y-m-d H:i:s');
        $header                    = <<<INI
; ========================================================
; This file is generated by the BootManager at $now
; Do not edit manually
; ========================================================
INI;
        
        return $header.PHP_EOL.PHP_EOL.$this->arrayToIni($data);
    }
    
    protected function arrayToIni(array $data): string
    {
        $ini                        = [];
        
        foreach ($data as $key => $value) {
            if(is_array($value)) {
                
                if(!is_string($key)) {
                    throw new BootloaderException('Nested arrays are not supported for ini files with not string keys');
                }
                
                if(array_is_list($value)) {
                    $ini[]          = array_merge($ini, $this->arrayToBlock($key, $value));
                } else {
                    $ini[]          = array_merge($ini, $this->arrayToSection($key, $value));
                }
                
            } else {
                $ini[]              = $key.' = '.$this->valueToIni($value);
            }
        }
        
        return implode(PHP_EOL, $ini);
    }
    
    protected function arrayToSection(string $section, array $data): array
    {
        $ini                        = [];
        $ini[]                      = '';
        $ini[]                      = '['.$section.']';
        
        foreach ($data as $key => $value) {
            if(is_array($value)) {
                $ini[]              = array_merge($ini, $this->arrayToBlock($key, $value));
            } else {
                $ini[]              = $key.' = '.$this->valueToIni($value);
            }
        }
        
        return $ini;
    }
    
    protected function arrayToBlock(string $block, array $data): array
    {
        $ini                        = [];
        $ini[]                      = '';
        $isList                     = array_is_list($data);
        
        foreach ($data as $key => $value) {
            
            if(is_array($value)) {
                throw new BootloaderException('Nested arrays are not supported for sections: ' . $block);
            }
            
            if($isList) {
                $ini[]              = $block . '[] = ' . $this->valueToIni($value);
            } else {
                $ini[]              = $block . '[' . $key . '] = ' . $this->valueToIni($value);
            }
        }

        return $ini;
    }
    
    protected function valueToIni(mixed $value): string
    {
        if(is_int($value) || is_float($value)) {
            return (string)$value;
        }
        
        if(is_bool($value)) {
            return $value ? 'true' : 'false';
        }

        // escape double quotes and backslashes
        $value                      = str_replace(['\\', '"'], ['\\\\', '\"'], $value);
        
        return '"'.$value.'"';
    }
    
}